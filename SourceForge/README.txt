UCanAccess is an open source pure Java JDBC Driver implementation for access (mdb and accdb),
originally licensed under LGPL 2.1.  
Since the 3.0.0 release UCanAccess has been relicensed under the Apache License, Version 2.0. 

UCanAccess uses:
-Jackcess as MS Access Input/Output library.
-HSQLDB as synchronized DBMS.

Features:
-Supported Access formats: 2000,2002/2003,2007,2010/2013/2016 databases (1997 read-only).
-SELECT, INSERT, UPDATE, DELETE statements. Transactions and savepoints.
-Access data types: YESNO, BYTE, INTEGER, LONG, SINGLE, DOUBLE, NUMERIC, CURRENCY, COUNTER, TEXT, OLE, MEMO, GUID, DATETIME.
-Concurrent access from multiple users (i.e., multiple application server threads).
-Connection pooling.
-ANSI 92 SQL, core SQL-2008.
-MS Access SQL.
-Main Access functions implementation.
-You can execute select queries defined and saved in Access.
-LIKE operator accepts both standard '_' and access specific '?' as wildcard character, 
 both standard '%' and access specific '*' as jolly, # for single digit(access), [xxx][!xxx]for characters intervals.
-Both & and || string concat.
-Access date format (e.g., #11/22/2003 10:42:58 PM#).
-Both double quote " and single quote ' as SQL string delimiters.
-Square brackets for field names, table names and view names (Access Queries).
-Command Line Console. You can run SQL commands and display their results. CSV export command.

For more details see http://ucanaccess.sourceforge.net/site.html.

You can contact the author Marco Amadei at amadei.mar@gmail.com


UCanAccess 5.0.0 Release 
========================
-Upgrade to Java 8 (For Java 6/7 support, continue using UCanAccess 4.0.4.)
-Upgrade to Jackcess 3.0.0
-Move from Apache commons-lang to commons-lang3 (via Jackcess 3.x)
-Upgrade to HSQLDB 2.4.1
-Add support for java.time: LocalDateTime, LocalDate, LocalTime
-Add "Currency" as named format for Format function
-Fix issue with CREATE TABLE when table name contains an underscore 

UCanAccess 4.0.4 Release 
========================
-Upgrade to Jackcess 2.1.11
-Support Access_2016 "version 5" file format
-Initial support for "Large Number" (BIGINT) columns: CRUD, DDL
-Fix issue with NOT NULL columns created by UCanAccess DDL not respected by ACE/Jet
-Fix issue with multiple FK constraints between the same two tables
-Reduce HSQLDB resource consumption by lazy-loading "OLE Object" (BLOB) fields 

UCanAccess 4.0.3 Release 
========================
-Upgrade to Jackcess 2.1.9
-Enable arbitrary AutoNumber insert values <= 0
-Fix CREATE TABLE in UCanAccess (Access unable to open table when last column was declared as AUTOINCREMENT)
-Respect constraint name when adding foreign key
-Fix Query failed when Java Locale language is Turkish: uppercasing of column name caused query to fail
-Fix WHERE clause with NOT LIKE "T#####" caused error
-Fix Hyphen in DDL column name confused PreparedStatement, e.g., CREATE TABLE zzzFoo ([Req-MTI] TEXT(20))
-Explicit DDL support for Hyperlink fields, e.g. CREATE TABLE urlTest (id LONG PRIMARY KEY, website HYPERLINK)
-Maven POM Update, Patch to UcanaccessCallableStatement for Java >= 7 compilers
-Fix getBlob for null values
-Fix constraint breach warning referring to wrong row
-Fix regional settings issue under non-US locales


UCanAccess 4.0.2 Release
========================
-Enhanced the console features
   Better escaping of exported CSV fields with embedded delimiters and quotes. 
   Add -d flag to change delimiter 
   Add -t flag to export large tables directly
   Add --big_query_schema flag to export the Google BigQuery schema file
   Add --newlines flag to preserve embedded newlines when exporting to CSV
   Print UTF-8 byte order mark if --bom flag is given
   Fix incorrect SimpleDateFormat which outputs 12:00:00 for midnight in the "export" command
-Optimized the preparser
-Fix problem with remap= under Linux 
-Fix bug with built-in functions used in calculated field expressions. Added fake left$ and right$ functions
-Patched mapping of CHAR type when used in DDL
-Fix insert of arbitrary AutoNumber values
-Fix bug with the setting of Null values on complex type columns(i.e., Attachment, Multivalue)
-Fix bug on column aliases containing an accented character (aliases generated by Hibernate)


UCanAccess 4.0.1 Release. Fix release.
========================
-Fixed bug  that could affect columns order when creating a new table via ALTER TABLE statement and using a particular DDL statements sequence
-Minor fix on the UCanAccess console


UCanAccess 4.0.0 Release. First step towards a full DDL implementation
========================
Before this version only limited DDL was supported (CREATE TABLE and DROP TABLE). Now we've implemented:
-Table renaming, e.g.:
    ALTER TABLE [My old name] RENAME TO [My new name]
-Add new Column to existing table, e.g.:
    ALTER TABLE xxx ADD COLUMN yyy TEXT
    ALTER TABLE zzz ADD COLUMN kkk DATETIME NOT NULL DEFAULT now()
    ALTER TABLE [222 crazy name] ADD COLUMN [another crazy name] numeric (23,6) default 13.031955 not null
-Add new Index to existing table, e.g.:
    CREATE unique INDEX [index name] on [table name] (a ASC,c ASC )
    CREATE INDEX [index name] on bbb (a ASC,c ASC )
-Add Primary Key to existing table, e.g.:
    ALTER TABLE xxx add Primary key (column1,column2)
-Foreign Key creation, e.g.:
    ALTER TABLE x add constraint constr foreign key (colx1,colx2) references y (coly1, coly2) ON delete cascade
    Now you can also create FKs while creating a new table, e.g.,
    CREATE TABLE Babe( k LONG , y LONG, PRIMARY KEY(k,y),FOREIGN KEY (y) REFERENCES Parent (x) )
 
 -Upgrade to Jackcess 2.1.6


UCanAccess 3.0.7 Release
========================
-Fixed aggregate functions on the datatype DATE (e.g. select first(date_init) from ...)
-Fixed update queries having a parametric condition in the where clause (e.g. UPDATE COL1 SET COL1=[PAR1] WHERE COL2=[PAR2])
-Optimized the CLNG function
-Fixed a few bugs the happened when the parameter keepMirror is being used: 
see ReloadPersistentMirrorTest, a bug on the ORDER BY case-sensitivity  when the access db is updated externally 


UCanAccess 3.0.6 Release
========================
-Enhanced DataSource implementation
-Fixed bug that could have effect when a column name contained both a question mark '?' and a space ' ' characters
-Fixed bug with  APPEND or UPDATE access queries which used a variable of type TEXT as paramenter
-Fixed naming-conflict bug that could have effect  when updating tables  with the same name and a different structure from multiple databases connections


UCanAccess 3.0.5 Release
========================
-Fixed major bug on single-precision numeric column management: in particular conditions it could cause misalignment between  HSQLDB mirror and access db
-Enhanced DDL(Create Table) compatibility with PreparedStatement for use with other ORM tools
-Fixed bug on keyword "ROW" (it wasn't listed as keyword)
-When using the net.ucanaccess.jdbc.UcanloadDriver and the loader.jar, the setting -DUCANACCESS_HOME=D:\301\UCanAccess-3.0.1-bin
is no more needed if the loader.jar of your classpath is picked up directly from a standard UCanAccess  distribution
(i.e. from the loader folder in the unzipped  content of the UCanAccess-xxx.bin.zip)
Thanks to Gord Thompson for the idea and  having suggested the code


UCanAccess 3.0.4 Release
========================
-Implemented MS Access parametric SELECT queries. They will be available, where possibile, using the "table()" syntax, e.g., 	
select * from table(queryWithParameters(#1971-03-13#,'hi babe'))
A default query, parametrized with all parameters to null, will be available as well.

-Implemented APPEND, DELETE and UPDATE MS Access queries. They will be available, where possibile, as stored precedures and via CallableStatement, e.g.:  
CallableStatement cs= ucanaccess.prepareCall("{call insert_xxx(?,?,?)}");

-fixed issue(in the connecting phase) with table/column names starting with the $ character
-fixed issue(in querying) with table/column names within both a single quote character and a blank space character
-fixed bug that happened in subsequent drop and create table statements when executed without calling a commit between them
-fixed dlookup function
-fixed capitalisation  in column metadata for MS Access queries(views) like 
   SELECT tablename.* FROM ....
-fixed getBestRowIdentifier DatabaseMatadata method
-the proper exception is thrown when calling executeQuery method for update, insert and delete executions
-fixed bug on conflicting table names(e.g., my table and my_table)


UCanAccess 3.0.3.1 Release
==========================
Fixed major bug: in several cases exclamation mark in literal textual values (i.e., if you didn't use a PreparedStatement) was saved as point. 	


Old releases:
UCanAccess 3.0.3 Release
========================
Still a fix-bugs version, enhancements coming soon.
-fixed bug related to linked tables(from external db) with a complex type column.
-fixed bug on concurrent access in append on the same table by two or more different processes when using an auto increment key.
-fixed bug on iif function that now accepts null(interpreted as false) values as first argument.
-fixed bug on like criteria: now  digit intervals  are supported ([4-7] or [!2-6]).
-fixed bug on metadata reloading when a concurrent process does structural upgrades(e.g., when creating a  table).
-fixed bug when connecting to a database with a table/column whose the name contains the reserved character $.
-fixed bug on # special character escaping in like criteria expressions (to be escaped as usual with [#]).

About date values antecedent to the October 15, 1582 (Gregorian):
- when using a date in literal form (e.g. #1095-05-10#, or passing the string '1095-05-10' to the dateValue function ) this is interpreted in an MS Access compatible way, i.e., pure Gregorian calendar.
- also the FORMAT function is now consistent with this convention
- when passing to a PreparedStatement a date antecedent to  the October 15, 1582, it's an applicative duty to create it consistently within the proper Calendar, i.e. by using GregorianCalendar.setGregorianChange(new java.util.Date(Long.MIN_VALUE))


UCanAccess 3.0.2 Release
========================
Fixed bug in CREATE TABLE DDL implementation, when using DECIMAL or NUMERIC columns on nullable(required) column property.

UCanAccess 3.0.1 Release
========================
- Fixed bug in "create table as select..." statement where there is a name conflict in  columns defined in the select.
- Fixed bug in "create table" where one or more column names are the same names of specific access types(e.g., create table ttt(counter counter primary key, text text)) 
- Classloading isolation: in order to avoid conflicts in dependencies jars used by user development environment a new jar named ucanload.jar has been added to this distribution. 
This is strongly suggested for the use of UCanAccess with LibreOffice/OpenOffice.
In other words, this allows you to use in your applications/tools the version of commons-lang, commons-logging, Jackcess and HSQLDB you need, without any issue or impact on UCanAccess. 
If you are facing with a library conflict issue, you MUSTN'T add neither ucanaccess.jar nor any of the dependencies jars to your classpath but:
	1. unzip the UCanAccess-3.X.X-bin.zip distribution.
	2. add to your classpath just the ucanload.jar from the "loader" folder of the distribution
	3. set the system variable UCANACCESS_HOME so that it points the UCanAccess-3.x.x-bin folder (e.g. -DUCANACCESS_HOME=D:\301\UCanAccess-3.0.1-bin) 
	4. when required  (e.g. with java 6)  use the net.ucanaccess.jdbc.UcanloadDriver (e.g., Class.forName("net.ucanaccess.jdbc.UcanloadDriver")) 
	instead of the original one net.ucanaccess.jdbc.UcanaccessDriver.

See also the updates to the LibreOffice/OpenOffice configuration on the UCanAccess web site. 

UCanAccess 3.0.0 Release 
========================
- Relicense to Apache 2.0!!
- Upgrade to Jackcess 2.1.2

Metadata issues:
- Solved capitalization issues in both DatabaseMetaData and ResultSetMetaData implementations.
They both have  been reimplemented for this specific purpose.
Now UCanAccess can provide metadata with the correct capitalization(and no more all in upper case).
- Changed escaping of column and table names containing special characters or out-of-rules(e.g. starting with a number): 
now, in these cases, you can and must use the names defined in access(obviously in a case insensitive manner). 
- Supported all characterset with metadata (they were supported in data but not always in metadata elements like column or table names) 
- Fixed isAutoIncrement and isCurrency ResultSetMetaData methods.
- Customized DatabaseMetaData.getColumns so that it can now provide:
 the default column values in the COLUMN_DEF columm
 the correct IS_AUTOINCREMENT informations
 the correct IS_GENERATEDCOLUMN	(used for calculated fields)
 the customized column ORIGINAL_TYPE(original type in access)
- Customized DatabaseMetaData.getClientInfoProperties method that now returns UCanAccess driver available properties. 

Implemented, for counters handling: 
DISABLE AUTOINCREMENT ON TABLE_NAME
and 
ENABLE AUTOINCREMENT ON  TABLE_NAME. 
It may be useful in import/export of data from and to different tables with the same structure, avoiding to break some FK constraint.

Optimization issues:
- Fixed memory leak in MemoryTimer. It had effect in some particular situations (using the single connection mode if you're connecting to multiple db, in the case continous update by a different process, in the case of pooling on the db with intervals greater than the InactivityTimeout).
- Optimized reloading of db instances. If and only if you're sure that your db can be accessed by the MS Access GUI and just one JVM instance (using UCanAccess), you can now use the connection parameter
PreventReloading=true. It avoid the data to be reloaded when they aren't actually changed by the GUI.

Changed behaviour:
- Extended SELECT @@IDENTITY and Statement.getGeneratedKeys() features to the GUID type.
- In updatable ResultSet removed the  constraint to set all columns before inserting new rows, even if they are null or autoincrement.
- Concat character operators (&,+,||) behaviour with null:
	null & 'thing' -> 'thing'. It gave null in previous versions.
	null + 'thing' -> 'thing'. It gave null in previous versions.
If you want to switch to the old behaviour, you have to set the new connection property concatnulls=true.


You can read the whole change log in the UCanAccess web site:

http://ucanaccess.sourceforge.net/site.html#change